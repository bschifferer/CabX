import React from 'react';
import PropTypes from 'prop-types';
import { Button, StyleSheet, Text, View } from 'react-native';
import { Stitch, AnonymousCredential } from 'mongodb-stitch-react-native-sdk';
import { Container, Header, Content, Form, Item, Input, Label } from 'native-base';

export default class LoginPage extends React.Component {
	constructor(props) {
		super(props);
		this.state={
			currentUserId: undefined,
			client: undefined
		};
		this._loadClient = this._loadClient.bind(this);
		this._onPressLogin = this._onPressLogin.bind(this);
		this._onPressLogout = this._onPressLogout.bind(this);
	}

	componentDidMount() {
		this._loadClient();
	}

	render() {
		let loginStatus = "Currently logged out."

		if(this.state.currentUserId) {
			loginStatus = `Currently logged in as ${this.state.currentUserId}!`
		}

		loginButton = <Button
		onPress={this._onPressLogin}
		title="Login"/>

			logoutButton = <Button
		onPress={this._onPressLogout}
		title="Logout"/>

			return (
				/*
				<View style={styles.container}>
				<Text> {loginStatus} </Text>
				{this.state.currentUserId !== undefined ? logoutButton : loginButton}
				</View>
				*/

				<Container>
					<Header />
						<Content>
							<Form>
								<Item floatingLabel>
									<Label>Username</Label>
									<Input />
								</Item>
								<Item floatingLabel>
									<Label>Password</Label>
									<Input />
								</Item>
							</Form>
							<Button>
								<Text>Login</Text>
							</Button>
						</Content>
				</Container>
			);
	}

	_loadClient() {
		Stitch.initializeDefaultAppClient('cabxbackend-nddiu').then(client => {
			this.setState({ client });

			if(client.auth.isLoggedIn) {
				this.setState({ currentUserId: client.auth.user.id })
			}

			console.log("logging in anonymously");
			client.auth.loginWithCredential(new AnonymousCredential()).then(user => {
				console.log(`logged in anonymously as user ${user.id}`)
			});

			client.callFunction("echoArg", ["Hello world!"]).then(echoedResult => {
				console.log(`Echoed result: ${echoedResult}`);
			})
		});
	}

	_onPressLogin() {
		this.state.client.auth.loginWithCredential(new AnonymousCredential()).then(user => {
			console.log(`Successfully logged in as user ${user.id}`);
			this.setState({ currentUserId: user.id })
		}).catch(err => {
			console.log(`Failed to log in anonymously: ${err}`);
			this.setState({ currentUserId: undefined })
		});
		this.props.login();
	}

	_onPressLogout() {
		this.state.client.auth.logout().then(user => {
			console.log(`Successfully logged out`);
			this.setState({ currentUserId: undefined })
		}).catch(err => {
			console.log(`Failed to log out: ${err}`);
			this.setState({ currentUserId: undefined })
		});
	}
}

LoginPage.propTypes = {
	login: PropTypes.func.isRequired,
}

LoginPage.defaultProps = {
	login: () => {}
}

const styles = StyleSheet.create({
	container: {
		flex: 1,
		backgroundColor: '#fff',
		alignItems: 'center',
		justifyContent: 'center',
	},
});

